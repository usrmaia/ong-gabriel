// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(ulid())
  name          String?
  full_name     String?
  email         String          @unique
  emailVerified DateTime?
  date_of_birth DateTime?
  phone         String?
  phoneVerified DateTime?
  image         String?
  role          Role[]          @default([USER])
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  FormAnamneses FormAnamnesis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model FormAnamnesis {
  id     String @id @default(ulid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  whoLivesWith                      WhoLivesWith[]
  occupation                        String
  monthlyIncomeCents                BigInt
  monthlyFamilyIncomeCents          BigInt
  difficultiesBasic                 DifficultiesBasic
  socialBenefits                    String?
  emotionalState                    EmotionalState
  difficultiesSleeping              DifficultiesSleeping
  difficultyEating                  DifficultiesEating
  canNotDealWithProblems            String?
  selfDestructiveThoughts           String?
  haveSomeoneToTrust                String?
  haveEmotionalSupport              String?
  haveFinancialSupport              String?
  hasMedicalDiagnosis               String?
  currentlyUndergoingPsychTreatment String?
  currentlyTakingMedication         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WhoLivesWith {
  familia
  amigos
  outras_pessoas
  sozinho
}

enum DifficultiesBasic {
  sim
  as_vezes
  nao
}

enum EmotionalState {
  feliz
  neutro
  triste
  raiva
  ansioso
  choroso
}

enum DifficultiesSleeping {
  sim
  as_vezes
  nao
}

enum DifficultiesEating {
  sim
  as_vezes
  nao
}
