// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                   @id @default(ulid())
  name                               String?
  full_name                          String?
  email                              String                   @unique
  emailVerified                      DateTime?
  date_of_birth                      DateTime?
  phone                              String?
  phoneVerified                      DateTime?
  image                              String?
  role                               Role[]                   @default([USER])
  accounts                           Account[]
  sessions                           Session[]
  Authenticator                      Authenticator[]
  FormAnamneses                      FormAnamnesis[]
  PatientAttendancePatient           PatientAttendance[]      @relation("PatientAttendancePatient")
  PatientAttendanceProfessional      PatientAttendance[]      @relation("PatientAttendanceProfessional")
  AvailabilityAttendanceProfessional AvailabilityAttendance[] @relation("AvailabilityAttendanceProfessional")
  Documents                          Document[]
  Psych                              Psych?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
  PATIENT
  PREPSYCHO
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model FormAnamnesis {
  id     String @id @default(ulid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  whoLivesWith                      WhoLivesWith[]
  occupation                        String
  monthlyIncomeCents                BigInt
  monthlyFamilyIncomeCents          BigInt
  difficultiesBasic                 DifficultiesBasic
  socialBenefits                    String?
  emotionalState                    EmotionalState
  difficultiesSleeping              DifficultiesSleeping
  difficultyEating                  DifficultiesEating
  canNotDealWithProblems            String?
  selfDestructiveThoughts           String?
  haveSomeoneToTrust                String?
  haveEmotionalSupport              String?
  haveFinancialSupport              String?
  hasMedicalDiagnosis               String?
  currentlyUndergoingPsychTreatment String?
  currentlyTakingMedication         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WhoLivesWith {
  familia
  amigos
  outras_pessoas
  sozinho
}

enum DifficultiesBasic {
  sim
  as_vezes
  nao
}

enum EmotionalState {
  feliz
  neutro
  triste
  raiva
  ansioso
  choroso
}

enum DifficultiesSleeping {
  sim
  as_vezes
  nao
}

enum DifficultiesEating {
  sim
  as_vezes
  nao
}

model AvailabilityAttendance {
  id             String             @id @default(ulid())
  professional   User               @relation("AvailabilityAttendanceProfessional", fields: [professionalId], references: [id])
  professionalId String
  attendance     PatientAttendance?

  startAt  DateTime
  endAt    DateTime
  isBooked Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([professionalId, startAt, endAt])
}

model PatientAttendance {
  id             String                  @id @default(ulid())
  patientId      String
  patient        User                    @relation("PatientAttendancePatient", fields: [patientId], references: [id], onDelete: Cascade)
  professionalId String?
  professional   User?                   @relation("PatientAttendanceProfessional", fields: [professionalId], references: [id], onDelete: Cascade)
  availabilityId String?                 @unique
  availability   AvailabilityAttendance? @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  dateAt          DateTime? // TODO: remover este campo futuramente
  note            String?
  durationMinutes Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([professionalId, availabilityId])
}

model Document {
  id       String            @id @default(ulid())
  userId   String
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  mimeType MimeType
  category DocumentCategory?
  data     Bytes

  PsychProofAddress    Psych? @relation("ProofAddress")
  PsychCurriculumVitae Psych? @relation("CurriculumVitae")

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

enum MimeType {
  APPLICATION_PDF
}

enum DocumentCategory {
  PROOF_ADDRESS
  CURRICULUM_VITAE
}

model Psych {
  id     String @id @default(ulid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  proofAddressId    String   @unique
  proofAddress      Document @relation("ProofAddress", fields: [proofAddressId], references: [id], onDelete: Cascade)
  curriculumVitaeId String   @unique
  curriculumVitae   Document @relation("CurriculumVitae", fields: [curriculumVitaeId], references: [id], onDelete: Cascade)

  CRP                    String
  note                   String?
  hasXpSuicidePrevention Boolean
  pendingNote            String?
  interviewed            Boolean     @default(false)
  status                 PsychStatus @default(PENDING)
  street                 String
  number                 String
  complement             String?
  district               String
  city                   String
  state                  String
  zipCode                String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  evaluatedAt            DateTime?
}

enum PsychStatus {
  APPROVED
  FAILED
  PENDING // Avaliação pendente
  ADJUSTMENT // Precisa de ajuste nos documentos
}
